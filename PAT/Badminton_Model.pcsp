//       *****
// Player1: LKY
// |-|---------|---------|-|    (13) Error
// | |(1)p1_br | (2)p1_bl| |
// |-|---------|---------|-|
// | |(3)p1_mr | (4)p1-ml| |
// | |         |         | |
// |-|---------|---------|-|
// | |(5)p1_fr | (6)p1_fl| |
// |=======================|
// | |(7)p2_fl | (8)p2_fr| |
// |-|---------|---------|-|
// | |         |         | |
// | |(9)p2_ml |(10)p2_mr| |     
// |-|---------|---------|-|
// | |(11)p2_bl|(12)p2_br| |
// |-|---------|---------|-|
//
// Player2: Lakshya
//       *****

enum {lky_left_serve, lky_right_serve, lak_left_serve, lak_right_serve, player1, player2, na}; //serve position: left court and right court

var turn = na; // serve turn;
var lky_score = 0;
var lak_score = 0;
var won = na;
var shuttle = 13; // Starting position at Error
var lky_setscore = 0;
var lak_setscore = 0;
var lky_left_fail = 0;
var lky_backhand_fail = 0;

PlaySet = WhoServe1st; (Player1Serve [] Player2Serve);

PlayGame = PlaySet; IncreaseSetScore ;
WhoServe1st = []i:{lky_right_serve,lak_right_serve}@ TossCoin{turn = i} -> Skip;
Player1Serve = [won == na && turn == lky_right_serve] LKYReady_right -> ply1_r_serve [] [won == na && turn == lky_left_serve] LKYReady_left -> ply1_l_serve;

IncreaseSetScore = increaseScore {
	lky_score = 0;
	lak_score = 0;
	if (won == player1) {
		lky_setscore++
	} else {
		lak_setscore++;
	}; won = na;
	
} -> CheckGameOver;

CheckGameOver = [lky_setscore < 2 && lak_setscore < 2] PlayGame;
ply1_l_serve = pcase {                             
			5 : Serve_narrow{shuttle=9} -> ply2_forehand_r
			1 : Serve_wide{shuttle=9} -> ply2_backhand_r
			12: Serve_body{shuttle=9} -> (ply2_backhand_r [] ply2_forehand_r)
			0 : Serve_err{shuttle=13} -> ply1_err}; //Calculate score and serve system


ply1_r_serve = pcase {                             
			3 : Serve_narrow{shuttle=10} -> ply2_forehand_r
			4 : Serve_wide{shuttle=10} -> ply2_backhand_r
			13: Serve_body{shuttle=10} -> (ply2_backhand_r [] ply2_forehand_r)
			1 : Serve_err{shuttle=13} -> ply1_err}; //Calculate score and serve system

Player2Serve = [won == na && turn == lak_right_serve] LAKReady_right -> ply2_r_serve [] [won == na && turn == lak_left_serve] LAKReady_left -> ply2_l_serve;

ply2_l_serve = pcase {                             
			13: Serve_narrow{shuttle=3} -> ply1_forehand_r
			3: Serve_wide{shuttle=3} -> ply1_backhand_r
			7: Serve_body{shuttle=3} -> (ply1_backhand_r [] ply1_forehand_r)
			0: Serve_err{shuttle=13} -> ply2_err}; //Calculate score and serve system

ply2_r_serve = pcase {                             
			20: Serve_narrow{shuttle=4} -> ply1_forehand_r   
			0: Serve_wide{shuttle=4} -> ply1_backhand_r
			1: Serve_body{shuttle=4} -> (ply1_backhand_r [] ply1_forehand_r)
			1: Serve_err{shuttle=13} -> ply2_err}; //Calculate score and serve system

ply1_bl_stroke = pcase {                             
			20: FH_straight_back{shuttle=11} -> ply2_br_stroke
			12: FH_straight_mid{shuttle=9} ->  ply2_mr_stroke
			0 : FH_straight_front{shuttle=7} -> ply2_fr_stroke
			14: FH_cross_back{shuttle=12} -> ply2_bl_stroke
			9 : FH_cross_mid{shuttle=10} -> ply2_ml_stroke
			1 : FH_cross_front{shuttle=8} -> ply2_fl_stroke
            0 : BH_straight_back{shuttle=11} -> ply2_br_stroke
            0 : BH_straight_mid{shuttle=9} -> ply2_mr_stroke
            0 : BH_straight_front{shuttle=7} -> ply2_fr_stroke
            0 : BH_cross_back{shuttle=12} -> ply2_bl_stroke
            1 : BH_cross_mid{shuttle=10} -> ply2_ml_stroke
            0 : BH_cross_front{shuttle=8}-> ply2_fl_stroke
			3 : error{shuttle=13; lky_left_fail++;} -> ply1_err}; //Calculate score and serve system

ply1_ml_stroke = pcase {                             
			12: FH_straight_back{shuttle=11} -> ply2_br_stroke
			10: FH_straight_mid{shuttle=9} ->  ply2_mr_stroke
			0 : FH_straight_front{shuttle=7} -> ply2_fr_stroke
			10: FH_cross_back{shuttle=12} -> ply2_bl_stroke
			2 : FH_cross_mid{shuttle=10} -> ply2_ml_stroke
			0 : FH_cross_front{shuttle=8} -> ply2_fl_stroke
            37: BH_straight_back{shuttle=11} -> ply2_br_stroke
            11: BH_straight_mid{shuttle=9} -> ply2_mr_stroke
            10: BH_straight_front{shuttle=7} -> ply2_fr_stroke
            20: BH_cross_back{shuttle=12} -> ply2_bl_stroke
            11: BH_cross_mid{shuttle=10} -> ply2_ml_stroke
            1 : BH_cross_front{shuttle=8}-> ply2_fl_stroke
			7 : error{shuttle=13; lky_left_fail++;} -> ply1_err}; //Calculate score and serve system

ply1_fl_stroke = pcase {                             
			1 : FH_straight_back{shuttle=11} -> ply2_br_stroke
			2 : FH_straight_mid{shuttle=9} ->  ply2_mr_stroke
			0 : FH_straight_front{shuttle=7} -> ply2_fr_stroke
			2 : FH_cross_back{shuttle=12} -> ply2_bl_stroke
			0 : FH_cross_mid{shuttle=10} -> ply2_ml_stroke
			0 : FH_cross_front{shuttle=8} -> ply2_fl_stroke
            8 : BH_straight_back{shuttle=11} -> ply2_br_stroke
            5 : BH_straight_mid{shuttle=9} -> ply2_mr_stroke
            12: BH_straight_front{shuttle=7} -> ply2_fr_stroke
            11: BH_cross_back{shuttle=12} -> ply2_bl_stroke
            3 : BH_cross_mid{shuttle=10} -> ply2_ml_stroke
            6 : BH_cross_front{shuttle=8}-> ply2_fl_stroke
			1 : error{shuttle=13; lky_left_fail++} -> ply1_err}; //Calculate score and serve system

ply1_br_stroke = pcase {                             
			9 : FH_straight_back{shuttle=12} -> ply2_bl_stroke
			3 : FH_straight_mid{shuttle=10} ->  ply2_ml_stroke
			1 : FH_straight_front{shuttle=8} -> ply2_fl_stroke
			6 : FH_cross_back{shuttle=11} -> ply2_br_stroke
			4 : FH_cross_mid{shuttle=9} -> ply2_mr_stroke
			1 : FH_cross_front{shuttle=7} -> ply2_fr_stroke
            0 : BH_straight_back{shuttle=12} -> ply2_bl_stroke
            0 : BH_straight_mid{shuttle=10} -> ply2_ml_stroke
            0 : BH_straight_front{shuttle=8} -> ply2_fl_stroke
            0 : BH_cross_back{shuttle=11} -> ply2_br_stroke
            1 : BH_cross_mid{shuttle=9} -> ply2_mr_stroke
            1: BH_cross_front{shuttle=7} -> ply2_fr_stroke
			1: error{shuttle=13; lky_left_fail--;} -> ply1_err}; //Calculate score and serve system

ply1_mr_stroke = pcase {                             
			33: FH_straight_back{shuttle=12} -> ply2_bl_stroke
			15: FH_straight_mid{shuttle=10} ->  ply2_ml_stroke
			8 : FH_straight_front{shuttle=8} -> ply2_fl_stroke
			13: FH_cross_back{shuttle=11} -> ply2_br_stroke
			8 : FH_cross_mid{shuttle=9} -> ply2_mr_stroke
			5 : FH_cross_front{shuttle=7} -> ply2_fr_stroke
            10: BH_straight_back{shuttle=12} -> ply2_bl_stroke
            1 : BH_straight_mid{shuttle=10} -> ply2_ml_stroke
            0 : BH_straight_front{shuttle=8} -> ply2_fl_stroke
            1 : BH_cross_back{shuttle=11} -> ply2_br_stroke
            0: BH_cross_mid{shuttle=9} -> ply2_mr_stroke
            0: BH_cross_front{shuttle=7} -> ply2_fr_stroke
			19: error{shuttle=13; lky_left_fail--;} -> ply1_err}; //Calculate score and serve system

ply1_fr_stroke = pcase {                             
			9 : FH_straight_back{shuttle=12} -> ply2_bl_stroke
			4 : FH_straight_mid{shuttle=10} ->  ply2_ml_stroke
			11: FH_straight_front{shuttle=8} -> ply2_fl_stroke
			14: FH_cross_back{shuttle=11} -> ply2_br_stroke
			5 : FH_cross_mid{shuttle=9} -> ply2_mr_stroke
			6 : FH_cross_front{shuttle=7} -> ply2_fr_stroke
            11: BH_straight_back{shuttle=12} -> ply2_bl_stroke
            3 : BH_straight_mid{shuttle=10} -> ply2_ml_stroke
            3 : BH_straight_front{shuttle=8} -> ply2_fl_stroke
            0 : BH_cross_back{shuttle=11} -> ply2_br_stroke
            0 : BH_cross_mid{shuttle=9} -> ply2_mr_stroke
            1 : BH_cross_front{shuttle=7} -> ply2_fr_stroke
			4 : error{shuttle=13; lky_left_fail--;} -> ply1_err}; //Calculate score and serve system

ply2_bl_stroke = pcase {                             
			5: FH_straight_back{shuttle=2} -> ply1_br_stroke
			26: FH_straight_mid{shuttle=4} ->  ply1_mr_stroke
			0: FH_straight_front{shuttle=6} -> ply1_fr_stroke
			3: FH_cross_back{shuttle=1} -> ply1_bl_stroke
			19: FH_cross_mid{shuttle=3} -> ply1_ml_stroke
			0: FH_cross_front{shuttle=5} -> ply1_fl_stroke
            1: BH_straight_back{shuttle=2} -> ply1_br_stroke
            0: BH_straight_mid{shuttle=4} -> ply1_mr_stroke
            0: BH_straight_front{shuttle=6} -> ply1_fr_stroke
            0: BH_cross_back{shuttle=1} -> ply1_bl_stroke
            0: BH_cross_mid{shuttle=3} -> ply1_ml_stroke
            0: BH_cross_front{shuttle=5}-> ply1_fl_stroke
			4: error{shuttle=13} -> ply2_err}; //Calculate score and serve system

ply2_ml_stroke = pcase {                             
			3: FH_straight_back{shuttle=2} -> ply1_br_stroke
			16: FH_straight_mid{shuttle=4} ->  ply1_mr_stroke
			1: FH_straight_front{shuttle=6} -> ply1_fr_stroke
			2: FH_cross_back{shuttle=1} -> ply1_bl_stroke
			7: FH_cross_mid{shuttle=3} -> ply1_ml_stroke
			1: FH_cross_front{shuttle=5} -> ply1_fl_stroke
            1: BH_straight_back{shuttle=2} -> ply1_br_stroke
            17: BH_straight_mid{shuttle=4} -> ply1_mr_stroke
            18: BH_straight_front{shuttle=6} -> ply1_fr_stroke
            8: BH_cross_back{shuttle=1} -> ply1_bl_stroke
            17: BH_cross_mid{shuttle=3} -> ply1_ml_stroke
            10: BH_cross_front{shuttle=5}-> ply1_fl_stroke
			9: error{shuttle=13} ->ply2_err }; //Calculate score and serve system
			
ply2_fl_stroke = pcase {                             
			1: FH_straight_back{shuttle=2} -> ply1_br_stroke
			0: FH_straight_mid{shuttle=4} ->  ply1_mr_stroke
			2: FH_straight_front{shuttle=6} -> ply1_fr_stroke
			1: FH_cross_back{shuttle=1} -> ply1_bl_stroke
			0: FH_cross_mid{shuttle=3} -> ply1_ml_stroke
			0: FH_cross_front{shuttle=5} -> ply1_fl_stroke
            7: BH_straight_back{shuttle=2} -> ply1_br_stroke
            1: BH_straight_mid{shuttle=4} -> ply1_mr_stroke
            21: BH_straight_front{shuttle=6} -> ply1_fr_stroke
            19: BH_cross_back{shuttle=1} -> ply1_bl_stroke
            4: BH_cross_mid{shuttle=3} -> ply1_ml_stroke
            3: BH_cross_front{shuttle=5}-> ply1_fl_stroke
			8: error{shuttle=13} ->ply2_err }; //Calculate score and serve system

ply2_br_stroke = pcase {                             
			3: FH_straight_back{shuttle=1} -> ply1_bl_stroke
			24: FH_straight_mid{shuttle=3} ->  ply1_ml_stroke
			0: FH_straight_front{shuttle=5} -> ply1_fl_stroke
			1: FH_cross_back{shuttle=2} -> ply1_br_stroke
			10: FH_cross_mid{shuttle=4} -> ply1_mr_stroke
			0: FH_cross_front{shuttle=6} -> ply1_fr_stroke
            0: BH_straight_back{shuttle=1} -> ply1_bl_stroke
            0: BH_straight_mid{shuttle=3} -> ply1_ml_stroke
            0: BH_straight_front{shuttle=5} -> ply1_fl_stroke
            0: BH_cross_back{shuttle=2} -> ply1_br_stroke
            0: BH_cross_mid{shuttle=4} -> ply1_mr_stroke
            0: BH_cross_front{shuttle=6}-> ply1_fr_stroke
			3: error{shuttle=13} -> ply2_err}; //Calculate score and serve system

ply2_mr_stroke = pcase {                             
			10: FH_straight_back{shuttle=1} -> ply1_bl_stroke
			56: FH_straight_mid{shuttle=3} ->  ply1_ml_stroke
			8: FH_straight_front{shuttle=5} -> ply1_fl_stroke
			6: FH_cross_back{shuttle=2} -> ply1_br_stroke
			24: FH_cross_mid{shuttle=4} -> ply1_mr_stroke
			2: FH_cross_front{shuttle=6} -> ply1_fr_stroke
            1: BH_straight_back{shuttle=1} -> ply1_bl_stroke
            1: BH_straight_mid{shuttle=3} -> ply1_ml_stroke
            0: BH_straight_front{shuttle=5} -> ply1_fl_stroke
            0: BH_cross_back{shuttle=2} -> ply1_br_stroke
            0: BH_cross_mid{shuttle=4} -> ply1_mr_stroke
            0: BH_cross_front{shuttle=6}-> ply1_fr_stroke
			11: error{shuttle=13} -> ply2_err}; //Calculate score and serve system

ply2_fr_stroke = pcase {                             
        19: FH_straight_back{shuttle=1} -> ply1_bl_stroke
        2: FH_straight_mid{shuttle=3} ->  ply1_ml_stroke
        26: FH_straight_front{shuttle=5} -> ply1_fl_stroke
        10: FH_cross_back{shuttle=2} -> ply1_br_stroke
        2: FH_cross_mid{shuttle=4} -> ply1_mr_stroke
        8: FH_cross_front{shuttle=6} -> ply1_fr_stroke
        2: BH_straight_back{shuttle=1} -> ply1_bl_stroke
        0: BH_straight_mid{shuttle=3} -> ply1_ml_stroke
        0: BH_straight_front{shuttle=5} -> ply1_fl_stroke
        0: BH_cross_back{shuttle=2} -> ply1_br_stroke
        0: BH_cross_mid{shuttle=4} -> ply1_mr_stroke
        0: BH_cross_front{shuttle=6}-> ply1_fr_stroke
        2: error{shuttle=13} -> ply2_err}; // Calculate score and serve system

ply1_forehand_r = ifa(turn == lak_left_serve) {
    pcase {
        0 : FH_straight_back{shuttle=11} -> ply2_br_stroke
        2 : FH_straight_mid{shuttle=9} ->  ply2_mr_stroke
        1 : FH_straight_front{shuttle=7} -> ply2_fr_stroke
        3 : FH_cross_back{shuttle=12} -> ply2_bl_stroke
        1 : FH_cross_mid{shuttle=10} -> ply2_ml_stroke
        11: FH_cross_front{shuttle=8} -> ply2_fl_stroke
        0 : error{shuttle=13} -> ply1_err
    }
} else {
    pcase {
        1: FH_straight_back{shuttle=12} -> ply2_bl_stroke
        1: FH_straight_mid{shuttle=10} ->  ply2_ml_stroke
        2: FH_straight_front{shuttle=8} -> ply2_fl_stroke
        1: FH_cross_back{shuttle=11} -> ply2_br_stroke
        4: FH_cross_mid{shuttle=9} -> ply2_mr_stroke
        0: FH_cross_front{shuttle=7} -> ply2_fr_stroke
        0: error{shuttle=13} -> ply1_err
    }
};

ply1_backhand_r = ifa(turn == lak_left_serve) {
    pcase {
        0: BH_straight_back{shuttle=11} -> ply2_br_stroke
        0: BH_straight_mid{shuttle=9} -> ply2_mr_stroke
        1: BH_straight_front{shuttle=7} -> ply2_fr_stroke
        0: BH_cross_back{shuttle=12} -> ply2_bl_stroke
        0: BH_cross_mid{shuttle=10} -> ply2_ml_stroke
        1: BH_cross_front{shuttle=8}-> ply2_fl_stroke
        0: error{shuttle=13} -> ply1_err
    }
} else {
    pcase {
        1: BH_straight_back{shuttle=12} -> ply2_bl_stroke
        1: BH_straight_mid{shuttle=10} -> ply2_ml_stroke
        2: BH_straight_front{shuttle=8} -> ply2_fl_stroke
        2: BH_cross_back{shuttle=11} -> ply2_br_stroke
        8: BH_cross_mid{shuttle=9} -> ply2_mr_stroke
        0: BH_cross_front{shuttle=7} -> ply2_fr_stroke
        0: error{shuttle=13} -> ply1_err
    }
};

ply2_forehand_r = ifa(turn == lky_left_serve) {
    pcase {
        0: FH_straight_back{shuttle=2} -> ply1_br_stroke
        0: FH_straight_mid{shuttle=4} ->  ply1_mr_stroke
        2: FH_straight_front{shuttle=6} -> ply1_fr_stroke
        3: FH_cross_back{shuttle=1} -> ply1_bl_stroke
        2: FH_cross_mid{shuttle=3} -> ply1_ml_stroke
        12: FH_cross_front{shuttle=5} -> ply1_fl_stroke
        0: error{shuttle=13} -> ply2_err
    }
} else {
    pcase {
        0: FH_straight_back{shuttle=1} -> ply1_bl_stroke
        0: FH_straight_mid{shuttle=3} ->  ply1_ml_stroke
        2: FH_straight_front{shuttle=5} -> ply1_fl_stroke
        1: FH_cross_back{shuttle=2} -> ply1_br_stroke
        10: FH_cross_mid{shuttle=4} -> ply1_mr_stroke
        6: FH_cross_front{shuttle=6} -> ply1_fr_stroke
        0: error{shuttle=13} -> ply2_err
    }
};

ply2_backhand_r = ifa(turn == lky_left_serve) {
    pcase {
        2: BH_straight_back{shuttle=2} -> ply1_br_stroke
        0: BH_straight_mid{shuttle=4} -> ply1_mr_stroke
        0: BH_straight_front{shuttle=6} -> ply1_fr_stroke
        0: BH_cross_back{shuttle=1} -> ply1_bl_stroke
        0: BH_cross_mid{shuttle=3} -> ply1_ml_stroke
        0: BH_cross_front{shuttle=5}-> ply1_fl_stroke
        1: error{shuttle=13} ->ply2_err
    }
} else {
    pcase {
        0: BH_straight_back{shuttle=1} -> ply1_bl_stroke
        0: BH_straight_mid{shuttle=3} -> ply1_ml_stroke
        0: BH_straight_front{shuttle=5} -> ply1_fl_stroke
        0: BH_cross_back{shuttle=2} -> ply1_br_stroke
        1: BH_cross_mid{shuttle=4} -> ply1_mr_stroke
        0: BH_cross_front{shuttle=6}-> ply1_fr_stroke
        0: error{shuttle=13} -> ply2_err
    }
};

NextPt = Player1Serve [] Player2Serve [] ([won != na] GameOver -> Skip);

ply1_err = Player1_Error{
	lak_score++;
	turn = na;
	if(lak_score == 30 || (lak_score >= 21 && lak_score - lky_score >= 2)) {
    	won = player2
	} else if(lak_score % 2 == 0) { // Even Score
    	turn = lak_right_serve
	} else {
    	turn = lak_left_serve
	}
} -> NextPt;

ply2_err = Player2_Error{
	lky_score++;
	turn = na;
	if(lky_score == 30 || (lky_score >= 21 && lky_score - lak_score >= 2)) {
    	won = player1
	} else if(lky_score % 2 == 0) { // Even Score
		turn = lky_right_serve
	} else {
		turn = lky_left_serve
	}
} -> NextPt;

// Single Set
#define player1WinSet won == player1;
#define player2WinSet won == player2;
#assert PlaySet reaches player1WinSet with prob;    // [0.37017, 0.56344]
#assert PlaySet reaches player2WinSet with prob;    // [0.43654, 0.6298]

// Single Set Late Game
#define player1WinSetInLateGame won == player1 && lky_score - lak_score >= 2;
#define player2WinSetInLateGame won == player2 && lak_score - lky_score >= 2;
#assert PlaySet reaches player1WinSetInLateGame with prob;    // [0.36993, 0.56328]
#assert PlaySet reaches player2WinSetInLateGame with prob;    // [0.43641, 0.62955]

// Full Game
#define player1WinGame lky_setscore == 2;
#define player2WinGame lak_setscore == 2;
#assert PlayGame reaches player1WinGame;    // [0.30964, 0.59465]
#assert PlayGame reaches player2WinGame;    // [0.40531, 0.69031]

// After error serve switches to opponent
#assert PlaySet |= [](Player1_Error -> X (LAKReady_left || LAKReady_right || GameOver));
#assert PlaySet |= [](Player2_Error -> X (LKYReady_left || LKYReady_right || GameOver));

// Only one player can win the whole game
#assert PlayGame |= player1WinGame -> !player2WinGame;
#assert PlayGame |= player2WinGame -> !player1WinGame;

// Set should not terminate unless score is reached
#define onGoingScore lky_score < 21 && lak_score < 21 && (lky_score > lak_score && lky_score - lak_score < 2) && (lak_score > lky_score && lak_score - lky_score < 2);
#assert PlaySet |= [](onGoingScore -> !GameOver);

// Check WinGame condition only takes place after a player has won
#define lkyWinCond ((lky_score - lak_score) >= 2 || lky_score == 30);
#define lakWinCond ((lak_score - lky_score) >= 2 || lak_score == 30);
#assert PlaySet |= player1WinGame -> []lkyWinCond;
#assert PlaySet |= player2WinGame -> []lakWinCond;

// LKY Left and Right failure rate
#define lkyLeftFail lky_left_fail > 0;
#define lkyRightFail lky_left_fail < 0;
#assert PlaySet reaches lkyLeftFail with prob;
#assert PlaySet reaches lkyRightFail with prob;

#define noWinner won == na;
#assert Player1Serve |= []noWinner;
#assert Player2Serve |= []noWinner;


#define lak_right_serve_cond lak_score % 2 == 0;
#define lky_right_serve_cond lky_score % 2 == 0;

#assert PlaySet |= [](LKYReady_left -> X!lky_right_serve_cond);
#assert PlaySet |= [](LKYReady_right ->X lky_right_serve_cond);


#assert PlaySet |= [](LAKReady_left -> X!lak_right_serve_cond);
#assert PlaySet |= [](LAKReady_right ->X lak_right_serve_cond);

#assert PlaySet |= []!(LKYReady_left -> X lky_right_serve_cond);
#assert PlaySet |= []!(LKYReady_right ->X !lky_right_serve_cond);


#assert PlaySet |= []!(LAKReady_left -> X lak_right_serve_cond);
#assert PlaySet |= []!(LAKReady_right ->X !lak_right_serve_cond);

